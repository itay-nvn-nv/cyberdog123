name: Build and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  find-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      dockerfile_list: ${{ steps.dockerfiles.outputs.dockerfile_list }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Dockerfiles
        id: dockerfiles
        run: |
          set -x # Enable debugging

          # Check if we're in a detached HEAD state and if it's a shallow repository
          IS_SHALLOW=$(git rev-parse --is-shallow-repository 2>/dev/null)

          if [[ "$IS_SHALLOW" == "true" ]]; then # Corrected comparison
            echo "::warning title=Shallow Repository::The repository is shallow. Fetching all history."
            git fetch --unshallow || true  # Ignore the error if unshallow fails
          fi

          # Determine the parent commit. Handles initial commit and branch creation cases.
          PARENT_COMMIT=$(git rev-parse --short HEAD^ 2>/dev/null) # Suppress error output

          # Check if there's a parent commit
          if [ -z "$PARENT_COMMIT" ]; then
            echo "No parent commit found. This is likely the first commit or detached HEAD."
            CHANGED_FILES=$(git ls-tree -r HEAD --name-only) # Get all files in the repo
          else
            echo "Parent commit: $PARENT_COMMIT"
            CHANGED_FILES=$(git diff --name-only "$PARENT_COMMIT" HEAD)
          fi

          echo "Changed files: $CHANGED_FILES"

          DOCKERFILES=$(echo "$CHANGED_FILES" | grep "Dockerfile" | tr '\n' ',' | sed 's/,$//')

          if [ -z "$DOCKERFILES" ]; then
            echo "No Dockerfiles found in the changed files. Skipping build and push."
            echo "dockerfile_list=[]" >> $GITHUB_ENV  # Empty JSON array for no dockerfiles
            echo "::set-output name=dockerfile_list::[]"  # Correctly set the output as an empty array
          else
            echo "Found Dockerfiles: $DOCKERFILES"
            # Convert comma-separated list into JSON format (array of paths)
            DOCKERFILES_JSON=$(echo "$DOCKERFILES" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
            echo "dockerfile_list=$DOCKERFILES_JSON" >> $GITHUB_ENV
            echo "::set-output name=dockerfile_list::$DOCKERFILES_JSON"  # Set the output correctly
          fi

        shell: bash

  build-and-push:
    needs: find-dockerfiles
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: ${{ needs.find-dockerfiles.outputs.dockerfile_list != '[]' }}  # Corrected to use job output

    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.find-dockerfiles.outputs.dockerfile_list) }}  # Access output correctly

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          # Extract the directory and Dockerfile name
          directory=$(dirname "${{ matrix.dockerfile }}")
          dockerfile_name=$(basename "${{ matrix.dockerfile }}" .Dockerfile)  # Remove the .Dockerfile extension
          
          # Create the full image name (username/repository:latest)
          image_full_name="${{ secrets.DOCKERHUB_USERNAME }}/$dockerfile_name:latest"

          echo "Building and pushing image: $image_full_name"

          # Build and push the image
          docker build --push \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --tag "$image_full_name" \
            --file "${{ matrix.dockerfile }}" \
            "$directory"
