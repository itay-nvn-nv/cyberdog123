name: Build and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  find-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      dockerfile_list: ${{ steps.dockerfiles.outputs.dockerfile_list }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Dockerfiles
        id: dockerfiles
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          DOCKERFILES=$(echo "$CHANGED_FILES" | grep "Dockerfile" | tr '\n' ',' | sed 's/,$//') # Changed to comma separated list
          if [ -z "$DOCKERFILES" ]; then
            echo "No Dockerfiles found in the changed files. Skipping build and push."
            echo "::set-output name=dockerfile_list::" # Empty list
          else
            echo "Found Dockerfiles: $DOCKERFILES"
            echo "::set-output name=dockerfile_list::$DOCKERFILES"
          fi
        shell: bash

  build-and-push:
    needs: find-dockerfiles  # Ensure find-dockerfiles runs first
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: needs.find-dockerfiles.outputs.dockerfile_list != '' # Only run if there are Dockerfiles
    strategy:
      matrix:
        dockerfile: ${{ fromJson(format('["{0}"]', replace(needs.find-dockerfiles.outputs.dockerfile_list, ',', '","')) ) }} # Create an array

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to get changes between commits

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          # Extract the directory from the Dockerfile path
          directory=$(dirname "${{ matrix.dockerfile }}")

          # Extract the image name from the Dockerfile path.
          image_name=$(basename "$directory")

          # Construct the full Docker Hub image name
          image_full_name="${{ secrets.DOCKERHUB_USERNAME }}/$image_name:latest"

          echo "Building and pushing image: $image_full_name"

          docker build --push \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --tag "$image_full_name" \
            --file "${{ matrix.dockerfile }}" \
            "$directory"
