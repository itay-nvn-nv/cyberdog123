name: Build and Push Docker Images

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
  DOCKERHUB_REPO: cyberdog123

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to get changes between commits

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Find Dockerfiles and Build/Push
        id: dockerfiles
        run: |
          # Get the list of changed files since the last commit on main
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)

          # Find Dockerfiles in the changed files
          DOCKERFILES=$(echo "$CHANGED_FILES" | grep "Dockerfile" | tr '\n' ' ')

          if [ -z "$DOCKERFILES" ]; then
            echo "::set-output name=changed::false"
            echo "No Dockerfiles found in the changed files. Skipping build and push."
          else
            echo "::set-output name=changed::true"
            echo "Found Dockerfiles: $DOCKERFILES"
            echo "::set-output name=dockerfile_list::$DOCKERFILES"  # Set output for next step
          fi
        shell: bash

      - name: Build and Push Docker Images
        if: steps.dockerfiles.outputs.changed == 'true'
        run: |
          for dockerfile in $(echo "${{ steps.dockerfiles.outputs.dockerfile_list }}"); do
            # Extract the directory from the Dockerfile path
            directory=$(dirname "$dockerfile")

            # Extract the image name from the Dockerfile path.  This assumes that the
            # directory name containing the Dockerfile corresponds to the desired image name.
            image_name=$(basename "$directory")

            # Construct the full Docker Hub image name
            image_full_name="${{ env.DOCKERHUB_USERNAME }}/$image_name:latest" # Using short commit SHA

            echo "Building and pushing image: $image_full_name"

            docker build --push \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --tag "$image_full_name" \
              --file "$dockerfile" \
              "$directory"
          done
        shell: bash
